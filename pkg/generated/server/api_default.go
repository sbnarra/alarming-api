/*
 * Alarming
 *
 * Alarming API
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package alarming

import (
	"encoding/json"
	"net/http"
	"strings"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{service: s}
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"CreateAlarm",
			strings.ToUpper("Post"),
			"/alarms",
			c.CreateAlarm,
		},
		{
			"ListAlarms",
			strings.ToUpper("Get"),
			"/alarms",
			c.ListAlarms,
		},
	}
}

// CreateAlarm -
func (c *DefaultApiController) CreateAlarm(w http.ResponseWriter, r *http.Request) {
	newAlarm := &NewAlarm{}
	if err := json.NewDecoder(r.Body).Decode(&newAlarm); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.CreateAlarm(r.Context(), *newAlarm)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListAlarms -
func (c *DefaultApiController) ListAlarms(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAlarms(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
